@cipher PHOTON256_permutation

sbox uint4[16] s = {12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2};
pbox uint[256] p = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 32, 33, 34, 35, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 64, 65, 66, 67, 68, 69, 70, 71, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 216, 217, 218, 219, 220, 221, 222, 223, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 252, 253, 254, 255, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251};
pboxm uint4[8][8] M = {{2,  4,  2, 11,  2,  8,  5,  6},
                       	{12,  9,  8, 13,  7,  7,  5,  2},
                       	{ 4,  4, 13, 13,  9,  4, 13,  9},
                       	{ 1,  6,  5,  1, 12, 13, 15, 14},
                       	{15, 12,  9, 13, 14,  5, 14, 13},
                       	{ 9, 14,  5, 15,  4, 12,  9, 6},
                       	{12,  2,  2, 10,  3,  1,  1, 14},
                       	{15,  1, 13, 10,  5, 10,  2, 3}};
ffm uint4[16][16] M = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                      {0, 2, 4, 6, 8, 10, 12, 14, 3, 1, 7, 5, 11, 9, 15, 13},
                      {0, 3, 6, 5, 12, 15, 10, 9, 11, 8, 13, 14, 7, 4, 1, 2},
                      {0, 4, 8, 12, 3, 7, 11, 15, 6, 2, 14, 10, 5, 1, 13, 9},
                      {0, 5, 10, 15, 7, 2, 13, 8, 14, 11, 4, 1, 9, 12, 3, 6},
                      {0, 6, 12, 10, 11, 13, 7, 1, 5, 3, 9, 15, 14, 8, 2, 4},
                      {0, 7, 14, 9, 15, 8, 1, 6, 13, 10, 3, 4, 2, 5, 12, 11},
                      {0, 8, 3, 11, 6, 14, 5, 13, 12, 4, 15, 7, 10, 2, 9, 1},
                      {0, 9, 1, 8, 2, 11, 3, 10, 4, 13, 5, 12, 6, 15, 7, 14},
                      {0, 10, 7, 13, 14, 4, 9, 3, 15, 5, 8, 2, 1, 11, 6, 12},
                      {0, 11, 5, 14, 10, 1, 15, 4, 7, 12, 2, 9, 13, 6, 8, 3},
                      {0, 12, 11, 7, 5, 9, 14, 2, 10, 6, 1, 13, 15, 3, 4, 8},
                      {0, 13, 9, 4, 1, 12, 8, 5, 2, 15, 11, 6, 3, 14, 10, 7},
                      {0, 14, 15, 1, 13, 3, 2, 12, 9, 7, 6, 8, 4, 10, 11, 5},
                      {0, 15, 13, 2, 9, 6, 4, 11, 1, 14, 12, 3, 8, 7, 5, 10}};

uint4[12] rc = {1, 3, 7, 14, 13, 11, 6, 12, 9, 2, 5, 10};
uint4[8] ic = {0, 1, 3, 7, 15, 14, 12, 8};

r_fn uint1[256] round_function(uint8 r, uint1[32] key, uint1[256] input) {
    #for (i from 0 to 7) {
    #    for (j from 0 to 3) {
    #        input[i*32+j] = input[i*32+j] ^ rc[r-1][3-j] ^ ic[i][3-j];
    #    }
    #}

    uint1[256] s_out;
	for (i from 0 to 63) {
	    uint1[4] temp = View(input, i*4, i*4+3);
        #uint4 sbox_in = touint(temp[3], temp[2], temp[1], temp[0]);
        uint1[4] sbox_out = s<temp>;
        s_out[i * 4 + 0] = sbox_out[3];
        s_out[i * 4 + 1] = sbox_out[2];
        s_out[i * 4 + 2] = sbox_out[1];
        s_out[i * 4 + 3] = sbox_out[0];
	}

    uint1[256] p_out = p<s_out>;

    uint1[256] m_out;
    for (i from 0 to 7) {
        # uint1[32] tx = View(p_out, 0 + i * 32, 31 + i * 32);
        uint4[8] tl;
        for (j from 0 to 7) {
            tl[j] = touint(p_out[32*i+j*4+3],p_out[32*i+j*4+2],p_out[32*i+j*4+1],p_out[32*i+j*4]);
        }
        uint4[8] tl_out = M * tl;
        for (j from 0 to 7) {
            m_out[i*32+j*4] = tl_out[j][3];
            m_out[i*32+j*4+1] = tl_out[j][2];
            m_out[i*32+j*4+2] = tl_out[j][1];
            m_out[i*32+j*4+3] = tl_out[j][0];
        }
    }
	return m_out;
}

fn uint1[256] enc(uint1[384] key, uint1[256] r_plaintext){
    for (i from 1 to 12) {
        r_plaintext = round_function(i, View(key, (i - 1) * 32, i * 32 - 1), r_plaintext);
    }
    return r_plaintext;
}